
PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fc4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08002158  08002158  00003158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022a0  080022a0  00004028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080022a0  080022a0  000032a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022a8  080022a8  00004028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022a8  080022a8  000032a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022ac  080022ac  000032ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080022b0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000028  080022d8  00004028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  080022d8  00004064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003eb9  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fb4  00000000  00000000  00007f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c0  00000000  00000000  00008ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000377  00000000  00000000  00009388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014eab  00000000  00000000  000096ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000056a4  00000000  00000000  0001e5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000829b2  00000000  00000000  00023c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011d8  00000000  00000000  000a6644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000a781c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002140 	.word	0x08002140

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	08002140 	.word	0x08002140

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b988 	b.w	8000510 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	468e      	mov	lr, r1
 8000220:	4604      	mov	r4, r0
 8000222:	4688      	mov	r8, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d962      	bls.n	80002f4 <__udivmoddi4+0xdc>
 800022e:	fab2 f682 	clz	r6, r2
 8000232:	b14e      	cbz	r6, 8000248 <__udivmoddi4+0x30>
 8000234:	f1c6 0320 	rsb	r3, r6, #32
 8000238:	fa01 f806 	lsl.w	r8, r1, r6
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	40b7      	lsls	r7, r6
 8000242:	ea43 0808 	orr.w	r8, r3, r8
 8000246:	40b4      	lsls	r4, r6
 8000248:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800024c:	fa1f fc87 	uxth.w	ip, r7
 8000250:	fbb8 f1fe 	udiv	r1, r8, lr
 8000254:	0c23      	lsrs	r3, r4, #16
 8000256:	fb0e 8811 	mls	r8, lr, r1, r8
 800025a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025e:	fb01 f20c 	mul.w	r2, r1, ip
 8000262:	429a      	cmp	r2, r3
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0x62>
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	f101 30ff 	add.w	r0, r1, #4294967295
 800026c:	f080 80ea 	bcs.w	8000444 <__udivmoddi4+0x22c>
 8000270:	429a      	cmp	r2, r3
 8000272:	f240 80e7 	bls.w	8000444 <__udivmoddi4+0x22c>
 8000276:	3902      	subs	r1, #2
 8000278:	443b      	add	r3, r7
 800027a:	1a9a      	subs	r2, r3, r2
 800027c:	b2a3      	uxth	r3, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028a:	fb00 fc0c 	mul.w	ip, r0, ip
 800028e:	459c      	cmp	ip, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x8e>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f100 32ff 	add.w	r2, r0, #4294967295
 8000298:	f080 80d6 	bcs.w	8000448 <__udivmoddi4+0x230>
 800029c:	459c      	cmp	ip, r3
 800029e:	f240 80d3 	bls.w	8000448 <__udivmoddi4+0x230>
 80002a2:	443b      	add	r3, r7
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002aa:	eba3 030c 	sub.w	r3, r3, ip
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40f3      	lsrs	r3, r6
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xb6>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb0>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa2>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x14c>
 80002d6:	4573      	cmp	r3, lr
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xc8>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 8105 	bhi.w	80004ea <__udivmoddi4+0x2d2>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4690      	mov	r8, r2
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	d0e5      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002ee:	e9c5 4800 	strd	r4, r8, [r5]
 80002f2:	e7e2      	b.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f000 8090 	beq.w	800041a <__udivmoddi4+0x202>
 80002fa:	fab2 f682 	clz	r6, r2
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f040 80a4 	bne.w	800044c <__udivmoddi4+0x234>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	0c03      	lsrs	r3, r0, #16
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	b280      	uxth	r0, r0
 800030e:	b2bc      	uxth	r4, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb2 fcfe 	udiv	ip, r2, lr
 8000316:	fb0e 221c 	mls	r2, lr, ip, r2
 800031a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031e:	fb04 f20c 	mul.w	r2, r4, ip
 8000322:	429a      	cmp	r2, r3
 8000324:	d907      	bls.n	8000336 <__udivmoddi4+0x11e>
 8000326:	18fb      	adds	r3, r7, r3
 8000328:	f10c 38ff 	add.w	r8, ip, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x11c>
 800032e:	429a      	cmp	r2, r3
 8000330:	f200 80e0 	bhi.w	80004f4 <__udivmoddi4+0x2dc>
 8000334:	46c4      	mov	ip, r8
 8000336:	1a9b      	subs	r3, r3, r2
 8000338:	fbb3 f2fe 	udiv	r2, r3, lr
 800033c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000340:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000344:	fb02 f404 	mul.w	r4, r2, r4
 8000348:	429c      	cmp	r4, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x144>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x142>
 8000354:	429c      	cmp	r4, r3
 8000356:	f200 80ca 	bhi.w	80004ee <__udivmoddi4+0x2d6>
 800035a:	4602      	mov	r2, r0
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x98>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa0e f401 	lsl.w	r4, lr, r1
 8000374:	fa20 f306 	lsr.w	r3, r0, r6
 8000378:	fa2e fe06 	lsr.w	lr, lr, r6
 800037c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	fa1f fc87 	uxth.w	ip, r7
 800038a:	fbbe f0f9 	udiv	r0, lr, r9
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	fb09 ee10 	mls	lr, r9, r0, lr
 8000394:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000398:	fb00 fe0c 	mul.w	lr, r0, ip
 800039c:	45a6      	cmp	lr, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x1a0>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003aa:	f080 809c 	bcs.w	80004e6 <__udivmoddi4+0x2ce>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f240 8099 	bls.w	80004e6 <__udivmoddi4+0x2ce>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 040e 	sub.w	r4, r4, lr
 80003bc:	fa1f fe83 	uxth.w	lr, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003cc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d0:	45a4      	cmp	ip, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1ce>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003da:	f080 8082 	bcs.w	80004e2 <__udivmoddi4+0x2ca>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d97f      	bls.n	80004e2 <__udivmoddi4+0x2ca>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f2:	4564      	cmp	r4, ip
 80003f4:	4673      	mov	r3, lr
 80003f6:	46e1      	mov	r9, ip
 80003f8:	d362      	bcc.n	80004c0 <__udivmoddi4+0x2a8>
 80003fa:	d05f      	beq.n	80004bc <__udivmoddi4+0x2a4>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x1fe>
 80003fe:	ebb8 0203 	subs.w	r2, r8, r3
 8000402:	eb64 0409 	sbc.w	r4, r4, r9
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	fa22 f301 	lsr.w	r3, r2, r1
 800040e:	431e      	orrs	r6, r3
 8000410:	40cc      	lsrs	r4, r1
 8000412:	e9c5 6400 	strd	r6, r4, [r5]
 8000416:	2100      	movs	r1, #0
 8000418:	e74f      	b.n	80002ba <__udivmoddi4+0xa2>
 800041a:	fbb1 fcf2 	udiv	ip, r1, r2
 800041e:	0c01      	lsrs	r1, r0, #16
 8000420:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000424:	b280      	uxth	r0, r0
 8000426:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042a:	463b      	mov	r3, r7
 800042c:	4638      	mov	r0, r7
 800042e:	463c      	mov	r4, r7
 8000430:	46b8      	mov	r8, r7
 8000432:	46be      	mov	lr, r7
 8000434:	2620      	movs	r6, #32
 8000436:	fbb1 f1f7 	udiv	r1, r1, r7
 800043a:	eba2 0208 	sub.w	r2, r2, r8
 800043e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000442:	e766      	b.n	8000312 <__udivmoddi4+0xfa>
 8000444:	4601      	mov	r1, r0
 8000446:	e718      	b.n	800027a <__udivmoddi4+0x62>
 8000448:	4610      	mov	r0, r2
 800044a:	e72c      	b.n	80002a6 <__udivmoddi4+0x8e>
 800044c:	f1c6 0220 	rsb	r2, r6, #32
 8000450:	fa2e f302 	lsr.w	r3, lr, r2
 8000454:	40b7      	lsls	r7, r6
 8000456:	40b1      	lsls	r1, r6
 8000458:	fa20 f202 	lsr.w	r2, r0, r2
 800045c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000460:	430a      	orrs	r2, r1
 8000462:	fbb3 f8fe 	udiv	r8, r3, lr
 8000466:	b2bc      	uxth	r4, r7
 8000468:	fb0e 3318 	mls	r3, lr, r8, r3
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb08 f904 	mul.w	r9, r8, r4
 8000476:	40b0      	lsls	r0, r6
 8000478:	4589      	cmp	r9, r1
 800047a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047e:	b280      	uxth	r0, r0
 8000480:	d93e      	bls.n	8000500 <__udivmoddi4+0x2e8>
 8000482:	1879      	adds	r1, r7, r1
 8000484:	f108 3cff 	add.w	ip, r8, #4294967295
 8000488:	d201      	bcs.n	800048e <__udivmoddi4+0x276>
 800048a:	4589      	cmp	r9, r1
 800048c:	d81f      	bhi.n	80004ce <__udivmoddi4+0x2b6>
 800048e:	eba1 0109 	sub.w	r1, r1, r9
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fb09 f804 	mul.w	r8, r9, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	b292      	uxth	r2, r2
 80004a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a4:	4542      	cmp	r2, r8
 80004a6:	d229      	bcs.n	80004fc <__udivmoddi4+0x2e4>
 80004a8:	18ba      	adds	r2, r7, r2
 80004aa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ae:	d2c4      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b0:	4542      	cmp	r2, r8
 80004b2:	d2c2      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b4:	f1a9 0102 	sub.w	r1, r9, #2
 80004b8:	443a      	add	r2, r7
 80004ba:	e7be      	b.n	800043a <__udivmoddi4+0x222>
 80004bc:	45f0      	cmp	r8, lr
 80004be:	d29d      	bcs.n	80003fc <__udivmoddi4+0x1e4>
 80004c0:	ebbe 0302 	subs.w	r3, lr, r2
 80004c4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c8:	3801      	subs	r0, #1
 80004ca:	46e1      	mov	r9, ip
 80004cc:	e796      	b.n	80003fc <__udivmoddi4+0x1e4>
 80004ce:	eba7 0909 	sub.w	r9, r7, r9
 80004d2:	4449      	add	r1, r9
 80004d4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004dc:	fb09 f804 	mul.w	r8, r9, r4
 80004e0:	e7db      	b.n	800049a <__udivmoddi4+0x282>
 80004e2:	4673      	mov	r3, lr
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1ce>
 80004e6:	4650      	mov	r0, sl
 80004e8:	e766      	b.n	80003b8 <__udivmoddi4+0x1a0>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e6fd      	b.n	80002ea <__udivmoddi4+0xd2>
 80004ee:	443b      	add	r3, r7
 80004f0:	3a02      	subs	r2, #2
 80004f2:	e733      	b.n	800035c <__udivmoddi4+0x144>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	443b      	add	r3, r7
 80004fa:	e71c      	b.n	8000336 <__udivmoddi4+0x11e>
 80004fc:	4649      	mov	r1, r9
 80004fe:	e79c      	b.n	800043a <__udivmoddi4+0x222>
 8000500:	eba1 0109 	sub.w	r1, r1, r9
 8000504:	46c4      	mov	ip, r8
 8000506:	fbb1 f9fe 	udiv	r9, r1, lr
 800050a:	fb09 f804 	mul.w	r8, r9, r4
 800050e:	e7c4      	b.n	800049a <__udivmoddi4+0x282>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
void Security_HandleAlarm(void);
void Sound_Beep(uint16_t duration);
void LED_Control(uint8_t green, uint8_t red1, uint8_t red2);

int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
    HAL_Init();
 800051a:	f000 fe75 	bl	8001208 <HAL_Init>
    SystemClock_Config();
 800051e:	f000 fcd5 	bl	8000ecc <SystemClock_Config>
    MX_GPIO_Init();
 8000522:	f000 fd3d 	bl	8000fa0 <MX_GPIO_Init>
    LCD_Init();
 8000526:	f000 f831 	bl	800058c <LCD_Init>

    /* پیام خوش‌آمدگویی */
    LCD_Clear();
 800052a:	f000 fa0e 	bl	800094a <LCD_Clear>
    LCD_Print("RFID Security");
 800052e:	4814      	ldr	r0, [pc, #80]	@ (8000580 <main+0x6c>)
 8000530:	f000 f9dc 	bl	80008ec <LCD_Print>
    LCD_SetCursor(1, 0);
 8000534:	2100      	movs	r1, #0
 8000536:	2001      	movs	r0, #1
 8000538:	f000 f9ed 	bl	8000916 <LCD_SetCursor>
    LCD_Print("System Ready");
 800053c:	4811      	ldr	r0, [pc, #68]	@ (8000584 <main+0x70>)
 800053e:	f000 f9d5 	bl	80008ec <LCD_Print>
    HAL_Delay(1000);  // کاهش از 2000 به 1000
 8000542:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000546:	f000 fed1 	bl	80012ec <HAL_Delay>

    /* شروع سیستم در حالت غیرفعال */
    Security_SetState(SYSTEM_DISARMED);
 800054a:	2001      	movs	r0, #1
 800054c:	f000 fbae 	bl	8000cac <Security_SetState>

    while (1)
    {
        /* خواندن کیپد */
        char key = Keypad_GetKey();
 8000550:	f000 fa06 	bl	8000960 <Keypad_GetKey>
 8000554:	4603      	mov	r3, r0
 8000556:	71fb      	strb	r3, [r7, #7]
        if (key != 0) {
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d003      	beq.n	8000566 <main+0x52>
            Security_ProcessPassword(key);
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 fac1 	bl	8000ae8 <Security_ProcessPassword>
        }

        /* بررسی سنسورها */
        Security_CheckSensors();
 8000566:	f000 fa63 	bl	8000a30 <Security_CheckSensors>

        /* مدیریت آلارم */
        if (currentState == SYSTEM_ALARM) {
 800056a:	4b07      	ldr	r3, [pc, #28]	@ (8000588 <main+0x74>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b02      	cmp	r3, #2
 8000570:	d101      	bne.n	8000576 <main+0x62>
            Security_HandleAlarm();
 8000572:	f000 fc1d 	bl	8000db0 <Security_HandleAlarm>
        }

        HAL_Delay(50);  // کاهش از 100 به 50
 8000576:	2032      	movs	r0, #50	@ 0x32
 8000578:	f000 feb8 	bl	80012ec <HAL_Delay>
    {
 800057c:	e7e8      	b.n	8000550 <main+0x3c>
 800057e:	bf00      	nop
 8000580:	0800215c 	.word	0x0800215c
 8000584:	0800216c 	.word	0x0800216c
 8000588:	20000000 	.word	0x20000000

0800058c <LCD_Init>:

/* ================================================
 * توابع LCD
 * ================================================ */
void LCD_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
    HAL_Delay(20);  // delay ضروری برای power-up
 8000592:	2014      	movs	r0, #20
 8000594:	f000 feaa 	bl	80012ec <HAL_Delay>

    /* مراحل اولیه initialization */
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2101      	movs	r1, #1
 800059c:	4835      	ldr	r0, [pc, #212]	@ (8000674 <LCD_Init+0xe8>)
 800059e:	f001 f94b 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2102      	movs	r1, #2
 80005a6:	4833      	ldr	r0, [pc, #204]	@ (8000674 <LCD_Init+0xe8>)
 80005a8:	f001 f946 	bl	8001838 <HAL_GPIO_WritePin>

    /* ارسال 0x03 سه بار برای تضمین 4-bit mode */
    for(int i = 0; i < 3; i++) {
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	e026      	b.n	8000600 <LCD_Init+0x74>
        HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2110      	movs	r1, #16
 80005b6:	482f      	ldr	r0, [pc, #188]	@ (8000674 <LCD_Init+0xe8>)
 80005b8:	f001 f93e 	bl	8001838 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2120      	movs	r1, #32
 80005c0:	482c      	ldr	r0, [pc, #176]	@ (8000674 <LCD_Init+0xe8>)
 80005c2:	f001 f939 	bl	8001838 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2140      	movs	r1, #64	@ 0x40
 80005ca:	482a      	ldr	r0, [pc, #168]	@ (8000674 <LCD_Init+0xe8>)
 80005cc:	f001 f934 	bl	8001838 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2180      	movs	r1, #128	@ 0x80
 80005d4:	4827      	ldr	r0, [pc, #156]	@ (8000674 <LCD_Init+0xe8>)
 80005d6:	f001 f92f 	bl	8001838 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2102      	movs	r1, #2
 80005de:	4825      	ldr	r0, [pc, #148]	@ (8000674 <LCD_Init+0xe8>)
 80005e0:	f001 f92a 	bl	8001838 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 fe81 	bl	80012ec <HAL_Delay>
        HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2102      	movs	r1, #2
 80005ee:	4821      	ldr	r0, [pc, #132]	@ (8000674 <LCD_Init+0xe8>)
 80005f0:	f001 f922 	bl	8001838 <HAL_GPIO_WritePin>
        HAL_Delay(5);
 80005f4:	2005      	movs	r0, #5
 80005f6:	f000 fe79 	bl	80012ec <HAL_Delay>
    for(int i = 0; i < 3; i++) {
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3301      	adds	r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b02      	cmp	r3, #2
 8000604:	ddd5      	ble.n	80005b2 <LCD_Init+0x26>
    }

    /* تنظیم 4-bit mode */
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2110      	movs	r1, #16
 800060a:	481a      	ldr	r0, [pc, #104]	@ (8000674 <LCD_Init+0xe8>)
 800060c:	f001 f914 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2120      	movs	r1, #32
 8000614:	4817      	ldr	r0, [pc, #92]	@ (8000674 <LCD_Init+0xe8>)
 8000616:	f001 f90f 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2140      	movs	r1, #64	@ 0x40
 800061e:	4815      	ldr	r0, [pc, #84]	@ (8000674 <LCD_Init+0xe8>)
 8000620:	f001 f90a 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2180      	movs	r1, #128	@ 0x80
 8000628:	4812      	ldr	r0, [pc, #72]	@ (8000674 <LCD_Init+0xe8>)
 800062a:	f001 f905 	bl	8001838 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	2102      	movs	r1, #2
 8000632:	4810      	ldr	r0, [pc, #64]	@ (8000674 <LCD_Init+0xe8>)
 8000634:	f001 f900 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000638:	2001      	movs	r0, #1
 800063a:	f000 fe57 	bl	80012ec <HAL_Delay>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2102      	movs	r1, #2
 8000642:	480c      	ldr	r0, [pc, #48]	@ (8000674 <LCD_Init+0xe8>)
 8000644:	f001 f8f8 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000648:	2005      	movs	r0, #5
 800064a:	f000 fe4f 	bl	80012ec <HAL_Delay>

    /* حالا از توابع عادی استفاده کنیم */
    LCD_SendCommand(0x28); // 4-bit mode, 2 lines, 5x8 dots
 800064e:	2028      	movs	r0, #40	@ 0x28
 8000650:	f000 f812 	bl	8000678 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display ON, Cursor OFF
 8000654:	200c      	movs	r0, #12
 8000656:	f000 f80f 	bl	8000678 <LCD_SendCommand>
    LCD_SendCommand(0x06); // Auto increment cursor
 800065a:	2006      	movs	r0, #6
 800065c:	f000 f80c 	bl	8000678 <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 8000660:	2001      	movs	r0, #1
 8000662:	f000 f809 	bl	8000678 <LCD_SendCommand>
    HAL_Delay(2);
 8000666:	2002      	movs	r0, #2
 8000668:	f000 fe40 	bl	80012ec <HAL_Delay>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40020000 	.word	0x40020000

08000678 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
    /* RS = 0 برای دستور */
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2101      	movs	r1, #1
 8000686:	484a      	ldr	r0, [pc, #296]	@ (80007b0 <LCD_SendCommand+0x138>)
 8000688:	f001 f8d6 	bl	8001838 <HAL_GPIO_WritePin>

    /* ارسال 4 بیت بالا */
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (cmd & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	111b      	asrs	r3, r3, #4
 8000690:	b2db      	uxtb	r3, r3
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	b2db      	uxtb	r3, r3
 8000698:	461a      	mov	r2, r3
 800069a:	2110      	movs	r1, #16
 800069c:	4844      	ldr	r0, [pc, #272]	@ (80007b0 <LCD_SendCommand+0x138>)
 800069e:	f001 f8cb 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (cmd & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	115b      	asrs	r3, r3, #5
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	2120      	movs	r1, #32
 80006b2:	483f      	ldr	r0, [pc, #252]	@ (80007b0 <LCD_SendCommand+0x138>)
 80006b4:	f001 f8c0 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (cmd & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	119b      	asrs	r3, r3, #6
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	2140      	movs	r1, #64	@ 0x40
 80006c8:	4839      	ldr	r0, [pc, #228]	@ (80007b0 <LCD_SendCommand+0x138>)
 80006ca:	f001 f8b5 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (cmd & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	09db      	lsrs	r3, r3, #7
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	2180      	movs	r1, #128	@ 0x80
 80006d8:	4835      	ldr	r0, [pc, #212]	@ (80007b0 <LCD_SendCommand+0x138>)
 80006da:	f001 f8ad 	bl	8001838 <HAL_GPIO_WritePin>

    /* پالس Enable - حداقل delay برای عملکرد صحیح */
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2102      	movs	r1, #2
 80006e2:	4833      	ldr	r0, [pc, #204]	@ (80007b0 <LCD_SendCommand+0x138>)
 80006e4:	f001 f8a8 	bl	8001838 <HAL_GPIO_WritePin>
    for(volatile int i = 0; i < 100; i++); // delay کوتاه بدون HAL_Delay
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	e002      	b.n	80006f4 <LCD_SendCommand+0x7c>
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	2b63      	cmp	r3, #99	@ 0x63
 80006f8:	ddf9      	ble.n	80006ee <LCD_SendCommand+0x76>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2102      	movs	r1, #2
 80006fe:	482c      	ldr	r0, [pc, #176]	@ (80007b0 <LCD_SendCommand+0x138>)
 8000700:	f001 f89a 	bl	8001838 <HAL_GPIO_WritePin>
    for(volatile int i = 0; i < 100; i++); // delay کوتاه بدون HAL_Delay
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	e002      	b.n	8000710 <LCD_SendCommand+0x98>
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	3301      	adds	r3, #1
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	2b63      	cmp	r3, #99	@ 0x63
 8000714:	ddf9      	ble.n	800070a <LCD_SendCommand+0x92>

    /* ارسال 4 بیت پایین */
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (cmd & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	461a      	mov	r2, r3
 8000720:	2110      	movs	r1, #16
 8000722:	4823      	ldr	r0, [pc, #140]	@ (80007b0 <LCD_SendCommand+0x138>)
 8000724:	f001 f888 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (cmd & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	105b      	asrs	r3, r3, #1
 800072c:	b2db      	uxtb	r3, r3
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	b2db      	uxtb	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	2120      	movs	r1, #32
 8000738:	481d      	ldr	r0, [pc, #116]	@ (80007b0 <LCD_SendCommand+0x138>)
 800073a:	f001 f87d 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (cmd & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	109b      	asrs	r3, r3, #2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	461a      	mov	r2, r3
 800074c:	2140      	movs	r1, #64	@ 0x40
 800074e:	4818      	ldr	r0, [pc, #96]	@ (80007b0 <LCD_SendCommand+0x138>)
 8000750:	f001 f872 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (cmd & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	10db      	asrs	r3, r3, #3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	b2db      	uxtb	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	2180      	movs	r1, #128	@ 0x80
 8000764:	4812      	ldr	r0, [pc, #72]	@ (80007b0 <LCD_SendCommand+0x138>)
 8000766:	f001 f867 	bl	8001838 <HAL_GPIO_WritePin>

    /* پالس Enable - حداقل delay برای عملکرد صحیح */
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2102      	movs	r1, #2
 800076e:	4810      	ldr	r0, [pc, #64]	@ (80007b0 <LCD_SendCommand+0x138>)
 8000770:	f001 f862 	bl	8001838 <HAL_GPIO_WritePin>
    for(volatile int i = 0; i < 100; i++); // delay کوتاه بدون HAL_Delay
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	e002      	b.n	8000780 <LCD_SendCommand+0x108>
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b63      	cmp	r3, #99	@ 0x63
 8000784:	ddf9      	ble.n	800077a <LCD_SendCommand+0x102>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2102      	movs	r1, #2
 800078a:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <LCD_SendCommand+0x138>)
 800078c:	f001 f854 	bl	8001838 <HAL_GPIO_WritePin>
    for(volatile int i = 0; i < 400; i++); // delay کمی طولانی‌تر برای command
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	e002      	b.n	800079c <LCD_SendCommand+0x124>
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	3301      	adds	r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80007a2:	dbf8      	blt.n	8000796 <LCD_SendCommand+0x11e>
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40020000 	.word	0x40020000

080007b4 <LCD_SendData>:

void LCD_SendData(uint8_t data)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
    /* RS = 1 برای داده */
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2101      	movs	r1, #1
 80007c2:	4849      	ldr	r0, [pc, #292]	@ (80008e8 <LCD_SendData+0x134>)
 80007c4:	f001 f838 	bl	8001838 <HAL_GPIO_WritePin>

    /* ارسال 4 بیت بالا */
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	111b      	asrs	r3, r3, #4
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	2110      	movs	r1, #16
 80007d8:	4843      	ldr	r0, [pc, #268]	@ (80008e8 <LCD_SendData+0x134>)
 80007da:	f001 f82d 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	115b      	asrs	r3, r3, #5
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	2120      	movs	r1, #32
 80007ee:	483e      	ldr	r0, [pc, #248]	@ (80008e8 <LCD_SendData+0x134>)
 80007f0:	f001 f822 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	119b      	asrs	r3, r3, #6
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	461a      	mov	r2, r3
 8000802:	2140      	movs	r1, #64	@ 0x40
 8000804:	4838      	ldr	r0, [pc, #224]	@ (80008e8 <LCD_SendData+0x134>)
 8000806:	f001 f817 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	09db      	lsrs	r3, r3, #7
 800080e:	b2db      	uxtb	r3, r3
 8000810:	461a      	mov	r2, r3
 8000812:	2180      	movs	r1, #128	@ 0x80
 8000814:	4834      	ldr	r0, [pc, #208]	@ (80008e8 <LCD_SendData+0x134>)
 8000816:	f001 f80f 	bl	8001838 <HAL_GPIO_WritePin>

    /* پالس Enable - حداقل delay برای عملکرد صحیح */
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2102      	movs	r1, #2
 800081e:	4832      	ldr	r0, [pc, #200]	@ (80008e8 <LCD_SendData+0x134>)
 8000820:	f001 f80a 	bl	8001838 <HAL_GPIO_WritePin>
    for(volatile int i = 0; i < 100; i++); // delay کوتاه بدون HAL_Delay
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	e002      	b.n	8000830 <LCD_SendData+0x7c>
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	3301      	adds	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	2b63      	cmp	r3, #99	@ 0x63
 8000834:	ddf9      	ble.n	800082a <LCD_SendData+0x76>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2102      	movs	r1, #2
 800083a:	482b      	ldr	r0, [pc, #172]	@ (80008e8 <LCD_SendData+0x134>)
 800083c:	f000 fffc 	bl	8001838 <HAL_GPIO_WritePin>
    for(volatile int i = 0; i < 100; i++); // delay کوتاه بدون HAL_Delay
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	e002      	b.n	800084c <LCD_SendData+0x98>
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	3301      	adds	r3, #1
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	2b63      	cmp	r3, #99	@ 0x63
 8000850:	ddf9      	ble.n	8000846 <LCD_SendData+0x92>

    /* ارسال 4 بیت پایین */
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	b2db      	uxtb	r3, r3
 800085a:	461a      	mov	r2, r3
 800085c:	2110      	movs	r1, #16
 800085e:	4822      	ldr	r0, [pc, #136]	@ (80008e8 <LCD_SendData+0x134>)
 8000860:	f000 ffea 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	105b      	asrs	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	b2db      	uxtb	r3, r3
 8000870:	461a      	mov	r2, r3
 8000872:	2120      	movs	r1, #32
 8000874:	481c      	ldr	r0, [pc, #112]	@ (80008e8 <LCD_SendData+0x134>)
 8000876:	f000 ffdf 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	109b      	asrs	r3, r3, #2
 800087e:	b2db      	uxtb	r3, r3
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	b2db      	uxtb	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	4817      	ldr	r0, [pc, #92]	@ (80008e8 <LCD_SendData+0x134>)
 800088c:	f000 ffd4 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	10db      	asrs	r3, r3, #3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	461a      	mov	r2, r3
 800089e:	2180      	movs	r1, #128	@ 0x80
 80008a0:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <LCD_SendData+0x134>)
 80008a2:	f000 ffc9 	bl	8001838 <HAL_GPIO_WritePin>

    /* پالس Enable - حداقل delay برای عملکرد صحیح */
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	2102      	movs	r1, #2
 80008aa:	480f      	ldr	r0, [pc, #60]	@ (80008e8 <LCD_SendData+0x134>)
 80008ac:	f000 ffc4 	bl	8001838 <HAL_GPIO_WritePin>
    for(volatile int i = 0; i < 100; i++); // delay کوتاه بدون HAL_Delay
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e002      	b.n	80008bc <LCD_SendData+0x108>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	3301      	adds	r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b63      	cmp	r3, #99	@ 0x63
 80008c0:	ddf9      	ble.n	80008b6 <LCD_SendData+0x102>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2102      	movs	r1, #2
 80008c6:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <LCD_SendData+0x134>)
 80008c8:	f000 ffb6 	bl	8001838 <HAL_GPIO_WritePin>
    for(volatile int i = 0; i < 200; i++); // delay کمی طولانی‌تر برای data
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	e002      	b.n	80008d8 <LCD_SendData+0x124>
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	3301      	adds	r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	2bc7      	cmp	r3, #199	@ 0xc7
 80008dc:	ddf9      	ble.n	80008d2 <LCD_SendData+0x11e>
}
 80008de:	bf00      	nop
 80008e0:	bf00      	nop
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40020000 	.word	0x40020000

080008ec <LCD_Print>:

void LCD_Print(char* str)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    while (*str) {
 80008f4:	e006      	b.n	8000904 <LCD_Print+0x18>
        LCD_SendData(*str++);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	607a      	str	r2, [r7, #4]
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff58 	bl	80007b4 <LCD_SendData>
    while (*str) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1f4      	bne.n	80008f6 <LCD_Print+0xa>
    }
}
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b084      	sub	sp, #16
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	460a      	mov	r2, r1
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	4613      	mov	r3, r2
 8000924:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    if (row == 0)
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d103      	bne.n	8000934 <LCD_SetCursor+0x1e>
        address = 0x80 + col;
 800092c:	79bb      	ldrb	r3, [r7, #6]
 800092e:	3b80      	subs	r3, #128	@ 0x80
 8000930:	73fb      	strb	r3, [r7, #15]
 8000932:	e002      	b.n	800093a <LCD_SetCursor+0x24>
    else
        address = 0xC0 + col;
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	3b40      	subs	r3, #64	@ 0x40
 8000938:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(address);
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fe9b 	bl	8000678 <LCD_SendCommand>
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <LCD_Clear>:

void LCD_Clear(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff fe92 	bl	8000678 <LCD_SendCommand>
    HAL_Delay(2);  // برگرداندن delay ضروری برای clear command
 8000954:	2002      	movs	r0, #2
 8000956:	f000 fcc9 	bl	80012ec <HAL_Delay>
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <Keypad_GetKey>:

/* ================================================
 * توابع کیپد
 * ================================================ */
char Keypad_GetKey(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
    uint16_t rows[4] = {KEYPAD_ROW1_Pin, KEYPAD_ROW2_Pin, KEYPAD_ROW3_Pin, KEYPAD_ROW4_Pin};
 8000966:	4a2e      	ldr	r2, [pc, #184]	@ (8000a20 <Keypad_GetKey+0xc0>)
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000970:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t cols[4] = {KEYPAD_COL1_Pin, KEYPAD_COL2_Pin, KEYPAD_COL3_Pin, KEYPAD_COL4_Pin};
 8000974:	4a2b      	ldr	r2, [pc, #172]	@ (8000a24 <Keypad_GetKey+0xc4>)
 8000976:	463b      	mov	r3, r7
 8000978:	e892 0003 	ldmia.w	r2, {r0, r1}
 800097c:	e883 0003 	stmia.w	r3, {r0, r1}

    for (int col = 0; col < 4; col++) {
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	e044      	b.n	8000a10 <Keypad_GetKey+0xb0>
        /* تنظیم همه ستون‌ها به HIGH */
        HAL_GPIO_WritePin(GPIOC, KEYPAD_COL1_Pin | KEYPAD_COL2_Pin | KEYPAD_COL3_Pin | KEYPAD_COL4_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	21f0      	movs	r1, #240	@ 0xf0
 800098a:	4827      	ldr	r0, [pc, #156]	@ (8000a28 <Keypad_GetKey+0xc8>)
 800098c:	f000 ff54 	bl	8001838 <HAL_GPIO_WritePin>

        /* تنظیم ستون جاری به LOW */
        HAL_GPIO_WritePin(GPIOC, cols[col], GPIO_PIN_RESET);
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	3318      	adds	r3, #24
 8000996:	443b      	add	r3, r7
 8000998:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800099c:	2200      	movs	r2, #0
 800099e:	4619      	mov	r1, r3
 80009a0:	4821      	ldr	r0, [pc, #132]	@ (8000a28 <Keypad_GetKey+0xc8>)
 80009a2:	f000 ff49 	bl	8001838 <HAL_GPIO_WritePin>

        HAL_Delay(2);  // کاهش از 10 به 2
 80009a6:	2002      	movs	r0, #2
 80009a8:	f000 fca0 	bl	80012ec <HAL_Delay>

        /* خواندن ردیف‌ها */
        for (int row = 0; row < 4; row++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	e028      	b.n	8000a04 <Keypad_GetKey+0xa4>
            if (HAL_GPIO_ReadPin(GPIOC, rows[row]) == GPIO_PIN_RESET) {
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	3318      	adds	r3, #24
 80009b8:	443b      	add	r3, r7
 80009ba:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80009be:	4619      	mov	r1, r3
 80009c0:	4819      	ldr	r0, [pc, #100]	@ (8000a28 <Keypad_GetKey+0xc8>)
 80009c2:	f000 ff21 	bl	8001808 <HAL_GPIO_ReadPin>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d118      	bne.n	80009fe <Keypad_GetKey+0x9e>
                /* منتظر رها شدن دکمه */
                while (HAL_GPIO_ReadPin(GPIOC, rows[row]) == GPIO_PIN_RESET);
 80009cc:	bf00      	nop
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	3318      	adds	r3, #24
 80009d4:	443b      	add	r3, r7
 80009d6:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80009da:	4619      	mov	r1, r3
 80009dc:	4812      	ldr	r0, [pc, #72]	@ (8000a28 <Keypad_GetKey+0xc8>)
 80009de:	f000 ff13 	bl	8001808 <HAL_GPIO_ReadPin>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d0f2      	beq.n	80009ce <Keypad_GetKey+0x6e>
                HAL_Delay(20); // کاهش از 50 به 20
 80009e8:	2014      	movs	r0, #20
 80009ea:	f000 fc7f 	bl	80012ec <HAL_Delay>
                return keypadLayout[row][col];
 80009ee:	4a0f      	ldr	r2, [pc, #60]	@ (8000a2c <Keypad_GetKey+0xcc>)
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	441a      	add	r2, r3
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	4413      	add	r3, r2
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	e00c      	b.n	8000a18 <Keypad_GetKey+0xb8>
        for (int row = 0; row < 4; row++) {
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	3301      	adds	r3, #1
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	ddd3      	ble.n	80009b2 <Keypad_GetKey+0x52>
    for (int col = 0; col < 4; col++) {
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	ddb7      	ble.n	8000986 <Keypad_GetKey+0x26>
            }
        }
    }
    return 0; // هیچ دکمه‌ای فشرده نشده
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	0800217c 	.word	0x0800217c
 8000a24:	08002184 	.word	0x08002184
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	2000000c 	.word	0x2000000c

08000a30 <Security_CheckSensors>:

/* ================================================
 * توابع امنیتی
 * ================================================ */
void Security_CheckSensors(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
    static uint8_t lastPirState = 0;

    /* بررسی RFID Cards */
    if (HAL_GPIO_ReadPin(RFID_CARD1_GPIO_Port, RFID_CARD1_Pin) == GPIO_PIN_RESET) {
 8000a36:	2101      	movs	r1, #1
 8000a38:	4827      	ldr	r0, [pc, #156]	@ (8000ad8 <Security_CheckSensors+0xa8>)
 8000a3a:	f000 fee5 	bl	8001808 <HAL_GPIO_ReadPin>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10a      	bne.n	8000a5a <Security_CheckSensors+0x2a>
        /* کارت مجاز 1 */
        if (currentState == SYSTEM_ARMED) {
 8000a44:	4b25      	ldr	r3, [pc, #148]	@ (8000adc <Security_CheckSensors+0xac>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d126      	bne.n	8000a9a <Security_CheckSensors+0x6a>
            Security_SetState(SYSTEM_DISARMED);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f000 f92d 	bl	8000cac <Security_SetState>
            Sound_Beep(200);
 8000a52:	20c8      	movs	r0, #200	@ 0xc8
 8000a54:	f000 f9ea 	bl	8000e2c <Sound_Beep>
 8000a58:	e01f      	b.n	8000a9a <Security_CheckSensors+0x6a>
        }
    }
    else if (HAL_GPIO_ReadPin(RFID_CARD2_GPIO_Port, RFID_CARD2_Pin) == GPIO_PIN_RESET) {
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	481e      	ldr	r0, [pc, #120]	@ (8000ad8 <Security_CheckSensors+0xa8>)
 8000a5e:	f000 fed3 	bl	8001808 <HAL_GPIO_ReadPin>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d10a      	bne.n	8000a7e <Security_CheckSensors+0x4e>
        /* کارت مجاز 2 */
        if (currentState == SYSTEM_ARMED) {
 8000a68:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <Security_CheckSensors+0xac>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d114      	bne.n	8000a9a <Security_CheckSensors+0x6a>
            Security_SetState(SYSTEM_DISARMED);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f000 f91b 	bl	8000cac <Security_SetState>
            Sound_Beep(200);
 8000a76:	20c8      	movs	r0, #200	@ 0xc8
 8000a78:	f000 f9d8 	bl	8000e2c <Sound_Beep>
 8000a7c:	e00d      	b.n	8000a9a <Security_CheckSensors+0x6a>
        }
    }
    else if (HAL_GPIO_ReadPin(RFID_CARD3_GPIO_Port, RFID_CARD3_Pin) == GPIO_PIN_RESET) {
 8000a7e:	2108      	movs	r1, #8
 8000a80:	4815      	ldr	r0, [pc, #84]	@ (8000ad8 <Security_CheckSensors+0xa8>)
 8000a82:	f000 fec1 	bl	8001808 <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d106      	bne.n	8000a9a <Security_CheckSensors+0x6a>
        /* کارت غیرمجاز */
        if (currentState == SYSTEM_ARMED) {
 8000a8c:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <Security_CheckSensors+0xac>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <Security_CheckSensors+0x6a>
            Security_SetState(SYSTEM_ALARM);
 8000a94:	2002      	movs	r0, #2
 8000a96:	f000 f909 	bl	8000cac <Security_SetState>
        }
    }

    /* بررسی PIR Sensor (LOGICSTATE) */
    uint8_t currentPirState = HAL_GPIO_ReadPin(PIR_SENSOR_GPIO_Port, PIR_SENSOR_Pin);
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	480e      	ldr	r0, [pc, #56]	@ (8000ad8 <Security_CheckSensors+0xa8>)
 8000a9e:	f000 feb3 	bl	8001808 <HAL_GPIO_ReadPin>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
    if (currentPirState == GPIO_PIN_SET && lastPirState == GPIO_PIN_RESET) {
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d10d      	bne.n	8000ac8 <Security_CheckSensors+0x98>
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <Security_CheckSensors+0xb0>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d109      	bne.n	8000ac8 <Security_CheckSensors+0x98>
        /* تشخیص حرکت */
        motionDetected = 1;
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <Security_CheckSensors+0xb4>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
        if (currentState == SYSTEM_ARMED) {
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <Security_CheckSensors+0xac>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d102      	bne.n	8000ac8 <Security_CheckSensors+0x98>
            Security_SetState(SYSTEM_ALARM);
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f000 f8f2 	bl	8000cac <Security_SetState>
        }
    }
    lastPirState = currentPirState;
 8000ac8:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <Security_CheckSensors+0xb0>)
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	7013      	strb	r3, [r2, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000055 	.word	0x20000055
 8000ae4:	20000054 	.word	0x20000054

08000ae8 <Security_ProcessPassword>:

/* تابع اصلاح شده Security_ProcessPassword */
void Security_ProcessPassword(char key)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
    if (key == 'C') {
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b43      	cmp	r3, #67	@ 0x43
 8000af6:	d11b      	bne.n	8000b30 <Security_ProcessPassword+0x48>
        /* پاک کردن رمز */
        memset(enteredPassword, 0, sizeof(enteredPassword));
 8000af8:	220a      	movs	r2, #10
 8000afa:	2100      	movs	r1, #0
 8000afc:	4862      	ldr	r0, [pc, #392]	@ (8000c88 <Security_ProcessPassword+0x1a0>)
 8000afe:	f001 faf3 	bl	80020e8 <memset>
        passwordIndex = 0;
 8000b02:	4b62      	ldr	r3, [pc, #392]	@ (8000c8c <Security_ProcessPassword+0x1a4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
        LCD_Clear();
 8000b08:	f7ff ff1f 	bl	800094a <LCD_Clear>
        if (currentState == SYSTEM_PASSWORD_ENTRY) {
 8000b0c:	4b60      	ldr	r3, [pc, #384]	@ (8000c90 <Security_ProcessPassword+0x1a8>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d107      	bne.n	8000b24 <Security_ProcessPassword+0x3c>
            LCD_Print("Enter Password:");
 8000b14:	485f      	ldr	r0, [pc, #380]	@ (8000c94 <Security_ProcessPassword+0x1ac>)
 8000b16:	f7ff fee9 	bl	80008ec <LCD_Print>
            LCD_SetCursor(1, 0);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f7ff fefa 	bl	8000916 <LCD_SetCursor>
        } else {
            Security_SetState(currentState); // بازگشت به وضعیت قبلی
        }
        return;
 8000b22:	e0ae      	b.n	8000c82 <Security_ProcessPassword+0x19a>
            Security_SetState(currentState); // بازگشت به وضعیت قبلی
 8000b24:	4b5a      	ldr	r3, [pc, #360]	@ (8000c90 <Security_ProcessPassword+0x1a8>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f8bf 	bl	8000cac <Security_SetState>
        return;
 8000b2e:	e0a8      	b.n	8000c82 <Security_ProcessPassword+0x19a>
    }

    if (key == '=' || key == '\n') {
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	2b3d      	cmp	r3, #61	@ 0x3d
 8000b34:	d002      	beq.n	8000b3c <Security_ProcessPassword+0x54>
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b0a      	cmp	r3, #10
 8000b3a:	d16f      	bne.n	8000c1c <Security_ProcessPassword+0x134>
        /* تأیید رمز */
        if (strcmp(enteredPassword, correctPassword) == 0) {
 8000b3c:	4956      	ldr	r1, [pc, #344]	@ (8000c98 <Security_ProcessPassword+0x1b0>)
 8000b3e:	4852      	ldr	r0, [pc, #328]	@ (8000c88 <Security_ProcessPassword+0x1a0>)
 8000b40:	f7ff fb48 	bl	80001d4 <strcmp>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d12f      	bne.n	8000baa <Security_ProcessPassword+0xc2>
            /* رمز صحیح */
            LCD_Clear();
 8000b4a:	f7ff fefe 	bl	800094a <LCD_Clear>
            LCD_Print("Password OK!");
 8000b4e:	4853      	ldr	r0, [pc, #332]	@ (8000c9c <Security_ProcessPassword+0x1b4>)
 8000b50:	f7ff fecc 	bl	80008ec <LCD_Print>
            LCD_SetCursor(1, 0);
 8000b54:	2100      	movs	r1, #0
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff fedd 	bl	8000916 <LCD_SetCursor>
            LCD_Print("Access Granted");
 8000b5c:	4850      	ldr	r0, [pc, #320]	@ (8000ca0 <Security_ProcessPassword+0x1b8>)
 8000b5e:	f7ff fec5 	bl	80008ec <LCD_Print>

            /* LED سبز روشن کن برای نشان دادن موفقیت */
            LED_Control(1, 0, 0); // فقط LED سبز روشن
 8000b62:	2200      	movs	r2, #0
 8000b64:	2100      	movs	r1, #0
 8000b66:	2001      	movs	r0, #1
 8000b68:	f000 f97c 	bl	8000e64 <LED_Control>
            Sound_Beep(200);  // بوق کوتاه موفقیت
 8000b6c:	20c8      	movs	r0, #200	@ 0xc8
 8000b6e:	f000 f95d 	bl	8000e2c <Sound_Beep>
            HAL_Delay(2000);  // انتظار برای نمایش پیام
 8000b72:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b76:	f000 fbb9 	bl	80012ec <HAL_Delay>

            /* حالا تغییر وضعیت */
            if (currentState == SYSTEM_DISARMED || currentState == SYSTEM_PASSWORD_ENTRY) {
 8000b7a:	4b45      	ldr	r3, [pc, #276]	@ (8000c90 <Security_ProcessPassword+0x1a8>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d003      	beq.n	8000b8a <Security_ProcessPassword+0xa2>
 8000b82:	4b43      	ldr	r3, [pc, #268]	@ (8000c90 <Security_ProcessPassword+0x1a8>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b03      	cmp	r3, #3
 8000b88:	d103      	bne.n	8000b92 <Security_ProcessPassword+0xaa>
                Security_SetState(SYSTEM_ARMED);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 f88e 	bl	8000cac <Security_SetState>
 8000b90:	e03b      	b.n	8000c0a <Security_ProcessPassword+0x122>
            } else if (currentState == SYSTEM_ARMED || currentState == SYSTEM_ALARM) {
 8000b92:	4b3f      	ldr	r3, [pc, #252]	@ (8000c90 <Security_ProcessPassword+0x1a8>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <Security_ProcessPassword+0xba>
 8000b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c90 <Security_ProcessPassword+0x1a8>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d133      	bne.n	8000c0a <Security_ProcessPassword+0x122>
                Security_SetState(SYSTEM_DISARMED);
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f000 f882 	bl	8000cac <Security_SetState>
 8000ba8:	e02f      	b.n	8000c0a <Security_ProcessPassword+0x122>
            }
        } else {
            /* رمز اشتباه */
            LCD_Clear();
 8000baa:	f7ff fece 	bl	800094a <LCD_Clear>
            LCD_Print("Wrong Password!");
 8000bae:	483d      	ldr	r0, [pc, #244]	@ (8000ca4 <Security_ProcessPassword+0x1bc>)
 8000bb0:	f7ff fe9c 	bl	80008ec <LCD_Print>
            LCD_SetCursor(1, 0);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff fead 	bl	8000916 <LCD_SetCursor>
            LCD_Print("Access Denied");
 8000bbc:	483a      	ldr	r0, [pc, #232]	@ (8000ca8 <Security_ProcessPassword+0x1c0>)
 8000bbe:	f7ff fe95 	bl	80008ec <LCD_Print>

            /* هر دو LED قرمز روشن کن + چشمک */
            for(int i = 0; i < 3; i++) {
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	e014      	b.n	8000bf2 <Security_ProcessPassword+0x10a>
                LED_Control(0, 1, 1); // هر دو قرمز روشن
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2101      	movs	r1, #1
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f000 f949 	bl	8000e64 <LED_Control>
                HAL_Delay(300);
 8000bd2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000bd6:	f000 fb89 	bl	80012ec <HAL_Delay>
                LED_Control(0, 0, 0); // خاموش
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2000      	movs	r0, #0
 8000be0:	f000 f940 	bl	8000e64 <LED_Control>
                HAL_Delay(300);
 8000be4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000be8:	f000 fb80 	bl	80012ec <HAL_Delay>
            for(int i = 0; i < 3; i++) {
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	dde7      	ble.n	8000bc8 <Security_ProcessPassword+0xe0>
            }
            Sound_Beep(500);  // بوق طولانی خطا
 8000bf8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bfc:	f000 f916 	bl	8000e2c <Sound_Beep>

            /* بازگشت به وضعیت قبلی */
            Security_SetState(currentState);
 8000c00:	4b23      	ldr	r3, [pc, #140]	@ (8000c90 <Security_ProcessPassword+0x1a8>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 f851 	bl	8000cac <Security_SetState>
        }

        /* پاک کردن رمز وارد شده */
        memset(enteredPassword, 0, sizeof(enteredPassword));
 8000c0a:	220a      	movs	r2, #10
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	481e      	ldr	r0, [pc, #120]	@ (8000c88 <Security_ProcessPassword+0x1a0>)
 8000c10:	f001 fa6a 	bl	80020e8 <memset>
        passwordIndex = 0;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	@ (8000c8c <Security_ProcessPassword+0x1a4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
        return;
 8000c1a:	e032      	b.n	8000c82 <Security_ProcessPassword+0x19a>
    }

    /* اگر عدد است */
    if (key >= '0' && key <= '9') {
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c20:	d92f      	bls.n	8000c82 <Security_ProcessPassword+0x19a>
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b39      	cmp	r3, #57	@ 0x39
 8000c26:	d82c      	bhi.n	8000c82 <Security_ProcessPassword+0x19a>
        if (passwordIndex < sizeof(enteredPassword) - 1) {
 8000c28:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <Security_ProcessPassword+0x1a4>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b08      	cmp	r3, #8
 8000c2e:	d828      	bhi.n	8000c82 <Security_ProcessPassword+0x19a>
            if (currentState != SYSTEM_PASSWORD_ENTRY) {
 8000c30:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <Security_ProcessPassword+0x1a8>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d002      	beq.n	8000c3e <Security_ProcessPassword+0x156>
                Security_SetState(SYSTEM_PASSWORD_ENTRY);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f837 	bl	8000cac <Security_SetState>
            }
            enteredPassword[passwordIndex] = key;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <Security_ProcessPassword+0x1a4>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	4619      	mov	r1, r3
 8000c44:	4a10      	ldr	r2, [pc, #64]	@ (8000c88 <Security_ProcessPassword+0x1a0>)
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	5453      	strb	r3, [r2, r1]
            passwordIndex++;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <Security_ProcessPassword+0x1a4>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <Security_ProcessPassword+0x1a4>)
 8000c54:	701a      	strb	r2, [r3, #0]

            /* نمایش ستاره به جای عدد */
            LCD_SetCursor(1, passwordIndex - 1);
 8000c56:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <Security_ProcessPassword+0x1a4>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4619      	mov	r1, r3
 8000c60:	2001      	movs	r0, #1
 8000c62:	f7ff fe58 	bl	8000916 <LCD_SetCursor>
            LCD_SendData('*');
 8000c66:	202a      	movs	r0, #42	@ 0x2a
 8000c68:	f7ff fda4 	bl	80007b4 <LCD_SendData>

            /* اگر 4 رقم وارد شد، خودکار چک کن */
            if (passwordIndex == 4) {
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <Security_ProcessPassword+0x1a4>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	d106      	bne.n	8000c82 <Security_ProcessPassword+0x19a>
                HAL_Delay(500);  // کمی صبر کن تا کاربر ببیند
 8000c74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c78:	f000 fb38 	bl	80012ec <HAL_Delay>
                Security_ProcessPassword('=');  // خودکار چک کن
 8000c7c:	203d      	movs	r0, #61	@ 0x3d
 8000c7e:	f7ff ff33 	bl	8000ae8 <Security_ProcessPassword>
            }
        }
    }
}
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000044 	.word	0x20000044
 8000c8c:	2000004e 	.word	0x2000004e
 8000c90:	20000000 	.word	0x20000000
 8000c94:	0800218c 	.word	0x0800218c
 8000c98:	20000004 	.word	0x20000004
 8000c9c:	0800219c 	.word	0x0800219c
 8000ca0:	080021ac 	.word	0x080021ac
 8000ca4:	080021bc 	.word	0x080021bc
 8000ca8:	080021cc 	.word	0x080021cc

08000cac <Security_SetState>:




void Security_SetState(SystemState_t newState)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
    currentState = newState;
 8000cb6:	4a33      	ldr	r2, [pc, #204]	@ (8000d84 <Security_SetState+0xd8>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	7013      	strb	r3, [r2, #0]
    LCD_Clear();
 8000cbc:	f7ff fe45 	bl	800094a <LCD_Clear>

    switch (currentState) {
 8000cc0:	4b30      	ldr	r3, [pc, #192]	@ (8000d84 <Security_SetState+0xd8>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	d858      	bhi.n	8000d7a <Security_SetState+0xce>
 8000cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd0 <Security_SetState+0x24>)
 8000cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cce:	bf00      	nop
 8000cd0:	08000d01 	.word	0x08000d01
 8000cd4:	08000ce1 	.word	0x08000ce1
 8000cd8:	08000d21 	.word	0x08000d21
 8000cdc:	08000d61 	.word	0x08000d61
        case SYSTEM_DISARMED:
            LCD_Print("System DISARMED");
 8000ce0:	4829      	ldr	r0, [pc, #164]	@ (8000d88 <Security_SetState+0xdc>)
 8000ce2:	f7ff fe03 	bl	80008ec <LCD_Print>
            LCD_SetCursor(1, 0);
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff fe14 	bl	8000916 <LCD_SetCursor>
            LCD_Print("Press *=* to ARM");
 8000cee:	4827      	ldr	r0, [pc, #156]	@ (8000d8c <Security_SetState+0xe0>)
 8000cf0:	f7ff fdfc 	bl	80008ec <LCD_Print>
            LED_Control(1, 0, 0); // سبز روشن، قرمزها خاموش
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f000 f8b3 	bl	8000e64 <LED_Control>
            break;
 8000cfe:	e03c      	b.n	8000d7a <Security_SetState+0xce>

        case SYSTEM_ARMED:
            LCD_Print("System ARMED");
 8000d00:	4823      	ldr	r0, [pc, #140]	@ (8000d90 <Security_SetState+0xe4>)
 8000d02:	f7ff fdf3 	bl	80008ec <LCD_Print>
            LCD_SetCursor(1, 0);
 8000d06:	2100      	movs	r1, #0
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f7ff fe04 	bl	8000916 <LCD_SetCursor>
            LCD_Print("Monitoring...");
 8000d0e:	4821      	ldr	r0, [pc, #132]	@ (8000d94 <Security_SetState+0xe8>)
 8000d10:	f7ff fdec 	bl	80008ec <LCD_Print>
            LED_Control(0, 1, 0); // قرمز 1 (PA9) روشن، بقیه خاموش
 8000d14:	2200      	movs	r2, #0
 8000d16:	2101      	movs	r1, #1
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 f8a3 	bl	8000e64 <LED_Control>
            break;
 8000d1e:	e02c      	b.n	8000d7a <Security_SetState+0xce>

        case SYSTEM_ALARM:
            LCD_Print("!! ALARM !!");
 8000d20:	481d      	ldr	r0, [pc, #116]	@ (8000d98 <Security_SetState+0xec>)
 8000d22:	f7ff fde3 	bl	80008ec <LCD_Print>
            LCD_SetCursor(1, 0);
 8000d26:	2100      	movs	r1, #0
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff fdf4 	bl	8000916 <LCD_SetCursor>
            if (motionDetected) {
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <Security_SetState+0xf0>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d006      	beq.n	8000d44 <Security_SetState+0x98>
                LCD_Print("Motion Detected");
 8000d36:	481a      	ldr	r0, [pc, #104]	@ (8000da0 <Security_SetState+0xf4>)
 8000d38:	f7ff fdd8 	bl	80008ec <LCD_Print>
                motionDetected = 0;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <Security_SetState+0xf0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e002      	b.n	8000d4a <Security_SetState+0x9e>
            } else {
                LCD_Print("Unauthorized");
 8000d44:	4817      	ldr	r0, [pc, #92]	@ (8000da4 <Security_SetState+0xf8>)
 8000d46:	f7ff fdd1 	bl	80008ec <LCD_Print>
            }
            LED_Control(0, 1, 1); // هر دو قرمز روشن
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 f888 	bl	8000e64 <LED_Control>
            alarmStartTime = HAL_GetTick();
 8000d54:	f000 fabe 	bl	80012d4 <HAL_GetTick>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4a13      	ldr	r2, [pc, #76]	@ (8000da8 <Security_SetState+0xfc>)
 8000d5c:	6013      	str	r3, [r2, #0]
            break;
 8000d5e:	e00c      	b.n	8000d7a <Security_SetState+0xce>

        case SYSTEM_PASSWORD_ENTRY:
            LCD_Print("Enter Password:");
 8000d60:	4812      	ldr	r0, [pc, #72]	@ (8000dac <Security_SetState+0x100>)
 8000d62:	f7ff fdc3 	bl	80008ec <LCD_Print>
            LCD_SetCursor(1, 0);
 8000d66:	2100      	movs	r1, #0
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff fdd4 	bl	8000916 <LCD_SetCursor>
            LED_Control(0, 0, 1); // قرمز 2 (PA10) روشن برای ورود پسورد
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2100      	movs	r1, #0
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 f876 	bl	8000e64 <LED_Control>
            break;
 8000d78:	bf00      	nop
    }
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000000 	.word	0x20000000
 8000d88:	080021dc 	.word	0x080021dc
 8000d8c:	080021ec 	.word	0x080021ec
 8000d90:	08002200 	.word	0x08002200
 8000d94:	08002210 	.word	0x08002210
 8000d98:	08002220 	.word	0x08002220
 8000d9c:	20000054 	.word	0x20000054
 8000da0:	0800222c 	.word	0x0800222c
 8000da4:	0800223c 	.word	0x0800223c
 8000da8:	20000050 	.word	0x20000050
 8000dac:	0800218c 	.word	0x0800218c

08000db0 <Security_HandleAlarm>:
    }
}


void Security_HandleAlarm(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
    static uint32_t lastBeepTime = 0;
    uint32_t currentTime = HAL_GetTick();
 8000db6:	f000 fa8d 	bl	80012d4 <HAL_GetTick>
 8000dba:	6078      	str	r0, [r7, #4]

    /* بوق زدن هر 300 میلی‌ثانیه */
    if (currentTime - lastBeepTime > 300) {  // کاهش از 500 به 300
 8000dbc:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <Security_HandleAlarm+0x70>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000dc8:	d905      	bls.n	8000dd6 <Security_HandleAlarm+0x26>
        Sound_Beep(100);  // کاهش از 200 به 100
 8000dca:	2064      	movs	r0, #100	@ 0x64
 8000dcc:	f000 f82e 	bl	8000e2c <Sound_Beep>
        lastBeepTime = currentTime;
 8000dd0:	4a13      	ldr	r2, [pc, #76]	@ (8000e20 <Security_HandleAlarm+0x70>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
    }

    /* چشمک زدن LEDs */
    static uint8_t ledState = 0;
    if (currentTime - alarmStartTime > 150) {  // کاهش از 250 به 150
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <Security_HandleAlarm+0x74>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b96      	cmp	r3, #150	@ 0x96
 8000de0:	d919      	bls.n	8000e16 <Security_HandleAlarm+0x66>
        ledState = !ledState;
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <Security_HandleAlarm+0x78>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	bf0c      	ite	eq
 8000dea:	2301      	moveq	r3, #1
 8000dec:	2300      	movne	r3, #0
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <Security_HandleAlarm+0x78>)
 8000df4:	701a      	strb	r2, [r3, #0]
        LED_Control(0, ledState, !ledState);
 8000df6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <Security_HandleAlarm+0x78>)
 8000df8:	7819      	ldrb	r1, [r3, #0]
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <Security_HandleAlarm+0x78>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf0c      	ite	eq
 8000e02:	2301      	moveq	r3, #1
 8000e04:	2300      	movne	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	461a      	mov	r2, r3
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f82a 	bl	8000e64 <LED_Control>
        alarmStartTime = currentTime;
 8000e10:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <Security_HandleAlarm+0x74>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
    }
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000058 	.word	0x20000058
 8000e24:	20000050 	.word	0x20000050
 8000e28:	2000005c 	.word	0x2000005c

08000e2c <Sound_Beep>:

/* ================================================
 * توابع صدا و LED
 * ================================================ */
void Sound_Beep(uint16_t duration)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e3c:	4808      	ldr	r0, [pc, #32]	@ (8000e60 <Sound_Beep+0x34>)
 8000e3e:	f000 fcfb 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_Delay(duration);
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fa51 	bl	80012ec <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e50:	4803      	ldr	r0, [pc, #12]	@ (8000e60 <Sound_Beep+0x34>)
 8000e52:	f000 fcf1 	bl	8001838 <HAL_GPIO_WritePin>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40020000 	.word	0x40020000

08000e64 <LED_Control>:

void LED_Control(uint8_t green, uint8_t red1, uint8_t red2)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	71bb      	strb	r3, [r7, #6]
 8000e72:	4613      	mov	r3, r2
 8000e74:	717b      	strb	r3, [r7, #5]
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, green ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bf14      	ite	ne
 8000e7c:	2301      	movne	r3, #1
 8000e7e:	2300      	moveq	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e88:	480f      	ldr	r0, [pc, #60]	@ (8000ec8 <LED_Control+0x64>)
 8000e8a:	f000 fcd5 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, red1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bf14      	ite	ne
 8000e94:	2301      	movne	r3, #1
 8000e96:	2300      	moveq	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ea0:	4809      	ldr	r0, [pc, #36]	@ (8000ec8 <LED_Control+0x64>)
 8000ea2:	f000 fcc9 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, red2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ea6:	797b      	ldrb	r3, [r7, #5]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bf14      	ite	ne
 8000eac:	2301      	movne	r3, #1
 8000eae:	2300      	moveq	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000eb8:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <LED_Control+0x64>)
 8000eba:	f000 fcbd 	bl	8001838 <HAL_GPIO_WritePin>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40020000 	.word	0x40020000

08000ecc <SystemClock_Config>:

/* ================================================
 * تنظیمات سیستم - اصلاح شده برای STM32F401
 * ================================================ */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b094      	sub	sp, #80	@ 0x50
 8000ed0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0320 	add.w	r3, r7, #32
 8000ed6:	2230      	movs	r2, #48	@ 0x30
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 f904 	bl	80020e8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	4a27      	ldr	r2, [pc, #156]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f00:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f18:	4a20      	ldr	r2, [pc, #128]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b1e      	ldr	r3, [pc, #120]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f36:	2302      	movs	r3, #2
 8000f38:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25;    // HSE/25 = 8MHz/25 (assuming 8MHz HSE)
 8000f40:	2319      	movs	r3, #25
 8000f42:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;   // VCO = 8MHz * 168
 8000f44:	23a8      	movs	r3, #168	@ 0xa8
 8000f46:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2; // PLLCLK = VCO/2 = 84MHz
 8000f48:	2302      	movs	r3, #2
 8000f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;     // USB Clock = VCO/4
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f50:	f107 0320 	add.w	r3, r7, #32
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fca3 	bl	80018a0 <HAL_RCC_OscConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0x98>
        Error_Handler();
 8000f60:	f000 f8ae 	bl	80010c0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f64:	230f      	movs	r3, #15
 8000f66:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f74:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	2102      	movs	r1, #2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 ff05 	bl	8001d90 <HAL_RCC_ClockConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0xc4>
        Error_Handler();
 8000f8c:	f000 f898 	bl	80010c0 <Error_Handler>
    }
}
 8000f90:	bf00      	nop
 8000f92:	3750      	adds	r7, #80	@ 0x50
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40007000 	.word	0x40007000

08000fa0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

    /* فعال‌سازی کلاک GPIO */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	4b3d      	ldr	r3, [pc, #244]	@ (80010b0 <MX_GPIO_Init+0x110>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a3c      	ldr	r2, [pc, #240]	@ (80010b0 <MX_GPIO_Init+0x110>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80010b0 <MX_GPIO_Init+0x110>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b36      	ldr	r3, [pc, #216]	@ (80010b0 <MX_GPIO_Init+0x110>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a35      	ldr	r2, [pc, #212]	@ (80010b0 <MX_GPIO_Init+0x110>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b33      	ldr	r3, [pc, #204]	@ (80010b0 <MX_GPIO_Init+0x110>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80010b0 <MX_GPIO_Init+0x110>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a2e      	ldr	r2, [pc, #184]	@ (80010b0 <MX_GPIO_Init+0x110>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <MX_GPIO_Init+0x110>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]

    /* تنظیم پین‌های خروجی LCD */
    GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 800100a:	23f3      	movs	r3, #243	@ 0xf3
 800100c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4619      	mov	r1, r3
 8001020:	4824      	ldr	r0, [pc, #144]	@ (80010b4 <MX_GPIO_Init+0x114>)
 8001022:	f000 fa6d 	bl	8001500 <HAL_GPIO_Init>

    /* تنظیم پین‌های خروجی LED و Buzzer */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED1_Pin|LED_RED2_Pin|BUZZER_Pin;
 8001026:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800102a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4619      	mov	r1, r3
 800103e:	481d      	ldr	r0, [pc, #116]	@ (80010b4 <MX_GPIO_Init+0x114>)
 8001040:	f000 fa5e 	bl	8001500 <HAL_GPIO_Init>

    /* تنظیم پین‌های ورودی سنسورها */
    GPIO_InitStruct.Pin = RFID_CARD1_Pin|RFID_CARD2_Pin|PIR_SENSOR_Pin|RFID_CARD3_Pin;
 8001044:	230f      	movs	r3, #15
 8001046:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104c:	2301      	movs	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4619      	mov	r1, r3
 8001056:	4818      	ldr	r0, [pc, #96]	@ (80010b8 <MX_GPIO_Init+0x118>)
 8001058:	f000 fa52 	bl	8001500 <HAL_GPIO_Init>

    /* تنظیم پین‌های کیپد */
    /* ردیف‌ها - ورودی با Pull-up */
    GPIO_InitStruct.Pin = KEYPAD_ROW1_Pin|KEYPAD_ROW2_Pin|KEYPAD_ROW3_Pin|KEYPAD_ROW4_Pin;
 800105c:	230f      	movs	r3, #15
 800105e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001064:	2301      	movs	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4619      	mov	r1, r3
 800106e:	4813      	ldr	r0, [pc, #76]	@ (80010bc <MX_GPIO_Init+0x11c>)
 8001070:	f000 fa46 	bl	8001500 <HAL_GPIO_Init>

    /* ستون‌ها - خروجی */
    GPIO_InitStruct.Pin = KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin;
 8001074:	23f0      	movs	r3, #240	@ 0xf0
 8001076:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4619      	mov	r1, r3
 800108a:	480c      	ldr	r0, [pc, #48]	@ (80010bc <MX_GPIO_Init+0x11c>)
 800108c:	f000 fa38 	bl	8001500 <HAL_GPIO_Init>

    /* تنظیم حالت اولیه پین‌های خروجی */
    HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_RED1_Pin|LED_RED2_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8001096:	4807      	ldr	r0, [pc, #28]	@ (80010b4 <MX_GPIO_Init+0x114>)
 8001098:	f000 fbce 	bl	8001838 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	21f0      	movs	r1, #240	@ 0xf0
 80010a0:	4806      	ldr	r0, [pc, #24]	@ (80010bc <MX_GPIO_Init+0x11c>)
 80010a2:	f000 fbc9 	bl	8001838 <HAL_GPIO_WritePin>
}
 80010a6:	bf00      	nop
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020800 	.word	0x40020800

080010c0 <Error_Handler>:

void Error_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
    __disable_irq();
    while (1) {
        /* LED قرمز چشمک بزند */
        HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 80010c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010cc:	4803      	ldr	r0, [pc, #12]	@ (80010dc <Error_Handler+0x1c>)
 80010ce:	f000 fbcc 	bl	800186a <HAL_GPIO_TogglePin>
        HAL_Delay(200);
 80010d2:	20c8      	movs	r0, #200	@ 0xc8
 80010d4:	f000 f90a 	bl	80012ec <HAL_Delay>
        HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 80010d8:	bf00      	nop
 80010da:	e7f5      	b.n	80010c8 <Error_Handler+0x8>
 80010dc:	40020000 	.word	0x40020000

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <HAL_MspInit+0x4c>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	4a0f      	ldr	r2, [pc, #60]	@ (800112c <HAL_MspInit+0x4c>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <HAL_MspInit+0x4c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <HAL_MspInit+0x4c>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	4a08      	ldr	r2, [pc, #32]	@ (800112c <HAL_MspInit+0x4c>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001110:	6413      	str	r3, [r2, #64]	@ 0x40
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_MspInit+0x4c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <NMI_Handler+0x4>

08001138 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <MemManage_Handler+0x4>

08001148 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <UsageFault_Handler+0x4>

08001158 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001186:	f000 f891 	bl	80012ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <SystemInit+0x20>)
 8001196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800119a:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <SystemInit+0x20>)
 800119c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011b8:	f7ff ffea 	bl	8001190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011be:	490d      	ldr	r1, [pc, #52]	@ (80011f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001200 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80011e2:	f000 ff89 	bl	80020f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e6:	f7ff f995 	bl	8000514 <main>
  bx  lr    
 80011ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80011f8:	080022b0 	.word	0x080022b0
  ldr r2, =_sbss
 80011fc:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001200:	20000064 	.word	0x20000064

08001204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC_IRQHandler>
	...

08001208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800120c:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0d      	ldr	r2, [pc, #52]	@ (8001248 <HAL_Init+0x40>)
 8001212:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001216:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001218:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <HAL_Init+0x40>)
 800121e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001222:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a07      	ldr	r2, [pc, #28]	@ (8001248 <HAL_Init+0x40>)
 800122a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800122e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 f931 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001236:	200f      	movs	r0, #15
 8001238:	f000 f808 	bl	800124c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123c:	f7ff ff50 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023c00 	.word	0x40023c00

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <HAL_InitTick+0x54>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_InitTick+0x58>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001262:	fbb3 f3f1 	udiv	r3, r3, r1
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f93b 	bl	80014e6 <HAL_SYSTICK_Config>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e00e      	b.n	8001298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d80a      	bhi.n	8001296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f000 f911 	bl	80014ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800128c:	4a06      	ldr	r2, [pc, #24]	@ (80012a8 <HAL_InitTick+0x5c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	e000      	b.n	8001298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	2000001c 	.word	0x2000001c
 80012a4:	20000024 	.word	0x20000024
 80012a8:	20000020 	.word	0x20000020

080012ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_IncTick+0x20>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_IncTick+0x24>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <HAL_IncTick+0x24>)
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000024 	.word	0x20000024
 80012d0:	20000060 	.word	0x20000060

080012d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b03      	ldr	r3, [pc, #12]	@ (80012e8 <HAL_GetTick+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000060 	.word	0x20000060

080012ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f4:	f7ff ffee 	bl	80012d4 <HAL_GetTick>
 80012f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001304:	d005      	beq.n	8001312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <HAL_Delay+0x44>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001312:	bf00      	nop
 8001314:	f7ff ffde 	bl	80012d4 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	429a      	cmp	r2, r3
 8001322:	d8f7      	bhi.n	8001314 <HAL_Delay+0x28>
  {
  }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000024 	.word	0x20000024

08001334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001344:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001350:	4013      	ands	r3, r2
 8001352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800135c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001366:	4a04      	ldr	r2, [pc, #16]	@ (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	60d3      	str	r3, [r2, #12]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001380:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <__NVIC_GetPriorityGrouping+0x18>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	f003 0307 	and.w	r3, r3, #7
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	@ (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	@ (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	@ 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
         );
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	@ 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f7ff ff8e 	bl	8001398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff47 	bl	8001334 <__NVIC_SetPriorityGrouping>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c0:	f7ff ff5c 	bl	800137c <__NVIC_GetPriorityGrouping>
 80014c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7ff ff8e 	bl	80013ec <NVIC_EncodePriority>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff5d 	bl	8001398 <__NVIC_SetPriority>
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffb0 	bl	8001454 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	@ 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	e159      	b.n	80017d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800151c:	2201      	movs	r2, #1
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	429a      	cmp	r2, r3
 8001536:	f040 8148 	bne.w	80017ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d005      	beq.n	8001552 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154e:	2b02      	cmp	r3, #2
 8001550:	d130      	bne.n	80015b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	2203      	movs	r2, #3
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001588:	2201      	movs	r2, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f003 0201 	and.w	r2, r3, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d017      	beq.n	80015f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d123      	bne.n	8001644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	220f      	movs	r2, #15
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	08da      	lsrs	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3208      	adds	r2, #8
 800163e:	69b9      	ldr	r1, [r7, #24]
 8001640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0203 	and.w	r2, r3, #3
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80a2 	beq.w	80017ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b57      	ldr	r3, [pc, #348]	@ (80017e8 <HAL_GPIO_Init+0x2e8>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	4a56      	ldr	r2, [pc, #344]	@ (80017e8 <HAL_GPIO_Init+0x2e8>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001694:	6453      	str	r3, [r2, #68]	@ 0x44
 8001696:	4b54      	ldr	r3, [pc, #336]	@ (80017e8 <HAL_GPIO_Init+0x2e8>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016a2:	4a52      	ldr	r2, [pc, #328]	@ (80017ec <HAL_GPIO_Init+0x2ec>)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	220f      	movs	r2, #15
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a49      	ldr	r2, [pc, #292]	@ (80017f0 <HAL_GPIO_Init+0x2f0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d019      	beq.n	8001702 <HAL_GPIO_Init+0x202>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a48      	ldr	r2, [pc, #288]	@ (80017f4 <HAL_GPIO_Init+0x2f4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_GPIO_Init+0x1fe>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a47      	ldr	r2, [pc, #284]	@ (80017f8 <HAL_GPIO_Init+0x2f8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00d      	beq.n	80016fa <HAL_GPIO_Init+0x1fa>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a46      	ldr	r2, [pc, #280]	@ (80017fc <HAL_GPIO_Init+0x2fc>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d007      	beq.n	80016f6 <HAL_GPIO_Init+0x1f6>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a45      	ldr	r2, [pc, #276]	@ (8001800 <HAL_GPIO_Init+0x300>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_GPIO_Init+0x1f2>
 80016ee:	2304      	movs	r3, #4
 80016f0:	e008      	b.n	8001704 <HAL_GPIO_Init+0x204>
 80016f2:	2307      	movs	r3, #7
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x204>
 80016f6:	2303      	movs	r3, #3
 80016f8:	e004      	b.n	8001704 <HAL_GPIO_Init+0x204>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_Init+0x204>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_GPIO_Init+0x204>
 8001702:	2300      	movs	r3, #0
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	f002 0203 	and.w	r2, r2, #3
 800170a:	0092      	lsls	r2, r2, #2
 800170c:	4093      	lsls	r3, r2
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001714:	4935      	ldr	r1, [pc, #212]	@ (80017ec <HAL_GPIO_Init+0x2ec>)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	3302      	adds	r3, #2
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001722:	4b38      	ldr	r3, [pc, #224]	@ (8001804 <HAL_GPIO_Init+0x304>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001746:	4a2f      	ldr	r2, [pc, #188]	@ (8001804 <HAL_GPIO_Init+0x304>)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800174c:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <HAL_GPIO_Init+0x304>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001770:	4a24      	ldr	r2, [pc, #144]	@ (8001804 <HAL_GPIO_Init+0x304>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001776:	4b23      	ldr	r3, [pc, #140]	@ (8001804 <HAL_GPIO_Init+0x304>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800179a:	4a1a      	ldr	r2, [pc, #104]	@ (8001804 <HAL_GPIO_Init+0x304>)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a0:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <HAL_GPIO_Init+0x304>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001804 <HAL_GPIO_Init+0x304>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3301      	adds	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	2b0f      	cmp	r3, #15
 80017d4:	f67f aea2 	bls.w	800151c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3724      	adds	r7, #36	@ 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40013800 	.word	0x40013800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	40020400 	.word	0x40020400
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020c00 	.word	0x40020c00
 8001800:	40021000 	.word	0x40021000
 8001804:	40013c00 	.word	0x40013c00

08001808 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	887b      	ldrh	r3, [r7, #2]
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
 8001824:	e001      	b.n	800182a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
 8001844:	4613      	mov	r3, r2
 8001846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001848:	787b      	ldrb	r3, [r7, #1]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800184e:	887a      	ldrh	r2, [r7, #2]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001854:	e003      	b.n	800185e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001856:	887b      	ldrh	r3, [r7, #2]
 8001858:	041a      	lsls	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	619a      	str	r2, [r3, #24]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800186a:	b480      	push	{r7}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800187c:	887a      	ldrh	r2, [r7, #2]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4013      	ands	r3, r2
 8001882:	041a      	lsls	r2, r3, #16
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43d9      	mvns	r1, r3
 8001888:	887b      	ldrh	r3, [r7, #2]
 800188a:	400b      	ands	r3, r1
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	619a      	str	r2, [r3, #24]
}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e267      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d075      	beq.n	80019aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018be:	4b88      	ldr	r3, [pc, #544]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d00c      	beq.n	80018e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ca:	4b85      	ldr	r3, [pc, #532]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d112      	bne.n	80018fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d6:	4b82      	ldr	r3, [pc, #520]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018e2:	d10b      	bne.n	80018fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d05b      	beq.n	80019a8 <HAL_RCC_OscConfig+0x108>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d157      	bne.n	80019a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e242      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001904:	d106      	bne.n	8001914 <HAL_RCC_OscConfig+0x74>
 8001906:	4b76      	ldr	r3, [pc, #472]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a75      	ldr	r2, [pc, #468]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e01d      	b.n	8001950 <HAL_RCC_OscConfig+0xb0>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x98>
 800191e:	4b70      	ldr	r3, [pc, #448]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6f      	ldr	r2, [pc, #444]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a6c      	ldr	r2, [pc, #432]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0xb0>
 8001938:	4b69      	ldr	r3, [pc, #420]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a68      	ldr	r2, [pc, #416]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800193e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b66      	ldr	r3, [pc, #408]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a65      	ldr	r2, [pc, #404]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fcbc 	bl	80012d4 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fcb8 	bl	80012d4 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	@ 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e207      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b5b      	ldr	r3, [pc, #364]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0xc0>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fca8 	bl	80012d4 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fca4 	bl	80012d4 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	@ 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e1f3      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	4b51      	ldr	r3, [pc, #324]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0xe8>
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d063      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019b6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00b      	beq.n	80019da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c2:	4b47      	ldr	r3, [pc, #284]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d11c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ce:	4b44      	ldr	r3, [pc, #272]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d116      	bne.n	8001a08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	4b41      	ldr	r3, [pc, #260]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x152>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e1c7      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4937      	ldr	r1, [pc, #220]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a06:	e03a      	b.n	8001a7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a10:	4b34      	ldr	r3, [pc, #208]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff fc5d 	bl	80012d4 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fc59 	bl	80012d4 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e1a8      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4925      	ldr	r1, [pc, #148]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
 8001a50:	e015      	b.n	8001a7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a52:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff fc3c 	bl	80012d4 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a60:	f7ff fc38 	bl	80012d4 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e187      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d036      	beq.n	8001af8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d016      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <HAL_RCC_OscConfig+0x248>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff fc1c 	bl	80012d4 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fc18 	bl	80012d4 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e167      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x200>
 8001abe:	e01b      	b.n	8001af8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_RCC_OscConfig+0x248>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fc05 	bl	80012d4 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001acc:	e00e      	b.n	8001aec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ace:	f7ff fc01 	bl	80012d4 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d907      	bls.n	8001aec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e150      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	42470000 	.word	0x42470000
 8001ae8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	4b88      	ldr	r3, [pc, #544]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1ea      	bne.n	8001ace <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8097 	beq.w	8001c34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0a:	4b81      	ldr	r3, [pc, #516]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10f      	bne.n	8001b36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	4a7c      	ldr	r2, [pc, #496]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b26:	4b7a      	ldr	r3, [pc, #488]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b32:	2301      	movs	r3, #1
 8001b34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	4b77      	ldr	r3, [pc, #476]	@ (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d118      	bne.n	8001b74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b42:	4b74      	ldr	r3, [pc, #464]	@ (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a73      	ldr	r2, [pc, #460]	@ (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fbc1 	bl	80012d4 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b56:	f7ff fbbd 	bl	80012d4 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e10c      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	4b6a      	ldr	r3, [pc, #424]	@ (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x2ea>
 8001b7c:	4b64      	ldr	r3, [pc, #400]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b80:	4a63      	ldr	r2, [pc, #396]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b88:	e01c      	b.n	8001bc4 <HAL_RCC_OscConfig+0x324>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x30c>
 8001b92:	4b5f      	ldr	r3, [pc, #380]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b96:	4a5e      	ldr	r2, [pc, #376]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b9e:	4b5c      	ldr	r3, [pc, #368]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba2:	4a5b      	ldr	r2, [pc, #364]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x324>
 8001bac:	4b58      	ldr	r3, [pc, #352]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb0:	4a57      	ldr	r2, [pc, #348]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb8:	4b55      	ldr	r3, [pc, #340]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bbc:	4a54      	ldr	r2, [pc, #336]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	f023 0304 	bic.w	r3, r3, #4
 8001bc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d015      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bcc:	f7ff fb82 	bl	80012d4 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fb7e 	bl	80012d4 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e0cb      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bea:	4b49      	ldr	r3, [pc, #292]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0ee      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x334>
 8001bf6:	e014      	b.n	8001c22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fb6c 	bl	80012d4 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c00:	f7ff fb68 	bl	80012d4 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e0b5      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	4b3e      	ldr	r3, [pc, #248]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1ee      	bne.n	8001c00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d105      	bne.n	8001c34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c28:	4b39      	ldr	r3, [pc, #228]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	4a38      	ldr	r2, [pc, #224]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80a1 	beq.w	8001d80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c3e:	4b34      	ldr	r3, [pc, #208]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d05c      	beq.n	8001d04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d141      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4b31      	ldr	r3, [pc, #196]	@ (8001d18 <HAL_RCC_OscConfig+0x478>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fb3c 	bl	80012d4 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff fb38 	bl	80012d4 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e087      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69da      	ldr	r2, [r3, #28]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	019b      	lsls	r3, r3, #6
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c94:	085b      	lsrs	r3, r3, #1
 8001c96:	3b01      	subs	r3, #1
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	491b      	ldr	r1, [pc, #108]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <HAL_RCC_OscConfig+0x478>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7ff fb11 	bl	80012d4 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7ff fb0d 	bl	80012d4 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e05c      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc8:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x416>
 8001cd4:	e054      	b.n	8001d80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_RCC_OscConfig+0x478>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fafa 	bl	80012d4 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff faf6 	bl	80012d4 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e045      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x444>
 8001d02:	e03d      	b.n	8001d80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e038      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40007000 	.word	0x40007000
 8001d18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <HAL_RCC_OscConfig+0x4ec>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d028      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d121      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d11a      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d111      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	3b01      	subs	r3, #1
 8001d66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800

08001d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0cc      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b68      	ldr	r3, [pc, #416]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d90c      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b65      	ldr	r3, [pc, #404]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b63      	ldr	r3, [pc, #396]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0b8      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de4:	4b59      	ldr	r3, [pc, #356]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a58      	ldr	r2, [pc, #352]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001dee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dfc:	4b53      	ldr	r3, [pc, #332]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4a52      	ldr	r2, [pc, #328]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	4b50      	ldr	r3, [pc, #320]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	494d      	ldr	r1, [pc, #308]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d044      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b47      	ldr	r3, [pc, #284]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d119      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e07f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d003      	beq.n	8001e4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e06f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e067      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6e:	4b37      	ldr	r3, [pc, #220]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f023 0203 	bic.w	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4934      	ldr	r1, [pc, #208]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e80:	f7ff fa28 	bl	80012d4 <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e88:	f7ff fa24 	bl	80012d4 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e04f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 020c 	and.w	r2, r3, #12
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d1eb      	bne.n	8001e88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d20c      	bcs.n	8001ed8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e032      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4916      	ldr	r1, [pc, #88]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f02:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	490e      	ldr	r1, [pc, #56]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f16:	f000 f821 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	490a      	ldr	r1, [pc, #40]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	5ccb      	ldrb	r3, [r1, r3]
 8001f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2e:	4a09      	ldr	r2, [pc, #36]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff f988 	bl	800124c <HAL_InitTick>

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023c00 	.word	0x40023c00
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	08002290 	.word	0x08002290
 8001f54:	2000001c 	.word	0x2000001c
 8001f58:	20000020 	.word	0x20000020

08001f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f60:	b090      	sub	sp, #64	@ 0x40
 8001f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f68:	2300      	movs	r3, #0
 8001f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f74:	4b59      	ldr	r3, [pc, #356]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d00d      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x40>
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	f200 80a1 	bhi.w	80020c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x34>
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d003      	beq.n	8001f96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f8e:	e09b      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f90:	4b53      	ldr	r3, [pc, #332]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f92:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001f94:	e09b      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f96:	4b53      	ldr	r3, [pc, #332]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f9a:	e098      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fa4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fa6:	4b4d      	ldr	r3, [pc, #308]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d028      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	099b      	lsrs	r3, r3, #6
 8001fb8:	2200      	movs	r2, #0
 8001fba:	623b      	str	r3, [r7, #32]
 8001fbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4b47      	ldr	r3, [pc, #284]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fc8:	fb03 f201 	mul.w	r2, r3, r1
 8001fcc:	2300      	movs	r3, #0
 8001fce:	fb00 f303 	mul.w	r3, r0, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a43      	ldr	r2, [pc, #268]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fd6:	fba0 1202 	umull	r1, r2, r0, r2
 8001fda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fdc:	460a      	mov	r2, r1
 8001fde:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001fe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fe2:	4413      	add	r3, r2
 8001fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	61fa      	str	r2, [r7, #28]
 8001fee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ff2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ff6:	f7fe f8f7 	bl	80001e8 <__aeabi_uldivmod>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4613      	mov	r3, r2
 8002000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002002:	e053      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002004:	4b35      	ldr	r3, [pc, #212]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x180>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	099b      	lsrs	r3, r3, #6
 800200a:	2200      	movs	r2, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	617a      	str	r2, [r7, #20]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002016:	f04f 0b00 	mov.w	fp, #0
 800201a:	4652      	mov	r2, sl
 800201c:	465b      	mov	r3, fp
 800201e:	f04f 0000 	mov.w	r0, #0
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	0159      	lsls	r1, r3, #5
 8002028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800202c:	0150      	lsls	r0, r2, #5
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	ebb2 080a 	subs.w	r8, r2, sl
 8002036:	eb63 090b 	sbc.w	r9, r3, fp
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002046:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800204a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800204e:	ebb2 0408 	subs.w	r4, r2, r8
 8002052:	eb63 0509 	sbc.w	r5, r3, r9
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	00eb      	lsls	r3, r5, #3
 8002060:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002064:	00e2      	lsls	r2, r4, #3
 8002066:	4614      	mov	r4, r2
 8002068:	461d      	mov	r5, r3
 800206a:	eb14 030a 	adds.w	r3, r4, sl
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	eb45 030b 	adc.w	r3, r5, fp
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002082:	4629      	mov	r1, r5
 8002084:	028b      	lsls	r3, r1, #10
 8002086:	4621      	mov	r1, r4
 8002088:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800208c:	4621      	mov	r1, r4
 800208e:	028a      	lsls	r2, r1, #10
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002096:	2200      	movs	r2, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	60fa      	str	r2, [r7, #12]
 800209c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020a0:	f7fe f8a2 	bl	80001e8 <__aeabi_uldivmod>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4613      	mov	r3, r2
 80020aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020ac:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x180>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	0c1b      	lsrs	r3, r3, #16
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	3301      	adds	r3, #1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80020bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020c6:	e002      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020c8:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80020ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3740      	adds	r7, #64	@ 0x40
 80020d4:	46bd      	mov	sp, r7
 80020d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	00f42400 	.word	0x00f42400
 80020e4:	017d7840 	.word	0x017d7840

080020e8 <memset>:
 80020e8:	4402      	add	r2, r0
 80020ea:	4603      	mov	r3, r0
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d100      	bne.n	80020f2 <memset+0xa>
 80020f0:	4770      	bx	lr
 80020f2:	f803 1b01 	strb.w	r1, [r3], #1
 80020f6:	e7f9      	b.n	80020ec <memset+0x4>

080020f8 <__libc_init_array>:
 80020f8:	b570      	push	{r4, r5, r6, lr}
 80020fa:	4d0d      	ldr	r5, [pc, #52]	@ (8002130 <__libc_init_array+0x38>)
 80020fc:	4c0d      	ldr	r4, [pc, #52]	@ (8002134 <__libc_init_array+0x3c>)
 80020fe:	1b64      	subs	r4, r4, r5
 8002100:	10a4      	asrs	r4, r4, #2
 8002102:	2600      	movs	r6, #0
 8002104:	42a6      	cmp	r6, r4
 8002106:	d109      	bne.n	800211c <__libc_init_array+0x24>
 8002108:	4d0b      	ldr	r5, [pc, #44]	@ (8002138 <__libc_init_array+0x40>)
 800210a:	4c0c      	ldr	r4, [pc, #48]	@ (800213c <__libc_init_array+0x44>)
 800210c:	f000 f818 	bl	8002140 <_init>
 8002110:	1b64      	subs	r4, r4, r5
 8002112:	10a4      	asrs	r4, r4, #2
 8002114:	2600      	movs	r6, #0
 8002116:	42a6      	cmp	r6, r4
 8002118:	d105      	bne.n	8002126 <__libc_init_array+0x2e>
 800211a:	bd70      	pop	{r4, r5, r6, pc}
 800211c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002120:	4798      	blx	r3
 8002122:	3601      	adds	r6, #1
 8002124:	e7ee      	b.n	8002104 <__libc_init_array+0xc>
 8002126:	f855 3b04 	ldr.w	r3, [r5], #4
 800212a:	4798      	blx	r3
 800212c:	3601      	adds	r6, #1
 800212e:	e7f2      	b.n	8002116 <__libc_init_array+0x1e>
 8002130:	080022a8 	.word	0x080022a8
 8002134:	080022a8 	.word	0x080022a8
 8002138:	080022a8 	.word	0x080022a8
 800213c:	080022ac 	.word	0x080022ac

08002140 <_init>:
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002142:	bf00      	nop
 8002144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002146:	bc08      	pop	{r3}
 8002148:	469e      	mov	lr, r3
 800214a:	4770      	bx	lr

0800214c <_fini>:
 800214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214e:	bf00      	nop
 8002150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002152:	bc08      	pop	{r3}
 8002154:	469e      	mov	lr, r3
 8002156:	4770      	bx	lr
